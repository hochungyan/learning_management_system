name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 1 * * 3'  # Every Wednesday at 1:00 AM

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Cache Python packages
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r backend/requirements.txt
          pip install flake8 pre-commit coverage pytest pytest-django pytest-cov sourcery-cli
      - name: Run pre-commit hooks
        run: pre-commit run --all-files

  sourcery:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Sourcery
        run: pip install sourcery-cli
      - name: Run Sourcery
        env:
          SOURCERY_TOKEN: ${{ secrets.SOURCERY_TOKEN }}
        run: |
          sourcery login --token $SOURCERY_TOKEN
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            git fetch origin ${{ github.base_ref }}
            sourcery review --check --diff "git diff origin/${{ github.base_ref }}..HEAD" .
          else
            sourcery review --check .
          fi

  code_quality:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r backend/requirements.txt
          pip install flake8 pre-commit
      - name: Run linters
        run: flake8 .
      - name: Run pre-commit hooks
        run: pre-commit run --all-files

  tests:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r backend/requirements.txt
          pip install coverage pytest pytest-django pytest-cov
      - name: Run tests with coverage
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
        run: |
          coverage run -m pytest
          coverage xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage.xml

  snyk:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python-3.10@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          SNYK_ORG_ID: ${{ secrets.SNYK_ORG_ID }}
        with:
          command: test
          args: "--org=${{ secrets.SNYK_ORG_ID }}"

  codeql_analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  deploy:
    runs-on: ubuntu-latest
    needs: [tests, code_quality, codeql_analysis, sourcery, snyk]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to Production
        run: echo "Deploying to production..."
        # Add your deployment steps here

  notify:
    runs-on: ubuntu-latest
    if: always()
    needs: [setup, sourcery, code_quality, tests, snyk, codeql_analysis, deploy]
    steps:
      - name: Get pipeline duration
        id: duration
        run: |
          start_time=$(jq -r '.jobs[].steps[] | select(.name == "Checkout code") | .started_at' $GITHUB_EVENT_PATH)
          end_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          duration=$(( $(date -d "$end_time" +%s) - $(date -d "$start_time" +%s) ))
          echo "DURATION=$(printf '%dm%ds' $(($duration / 60)) $(($duration % 60)))" >> $GITHUB_OUTPUT

      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "CI/CD Pipeline ${{ job.status == 'success' && 'Passed' || 'Failed' }} for ${{ github.repository }}"
          body: |
            CI/CD Pipeline Status: ${{ job.status == 'success' && 'Pass' || 'Fail' }}
            Project: ${{ github.repository }}
            Branch: ${{ github.head_ref || github.ref_name }}
            Commit: ${{ github.event.pull_request.number || github.event.head_commit.id }}
            Commit Author: ${{ github.event.head_commit.author.email }}
            Pipeline #${{ github.run_number }} triggered by ${{ github.actor }}
            Pipeline Runtime: ${{ steps.duration.outputs.DURATION }}
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.SMTP_USERNAME }}

      - name: Debug email step
        run: echo "Email notification sent to ${{ secrets.EMAIL_TO }} from ${{ secrets.SMTP_USERNAME }}"
